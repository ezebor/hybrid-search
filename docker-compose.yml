version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    # --- MODIFICATION: Added healthcheck to ensure Kafka is ready ---
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"

  api_server:
    build: .
    container_name: api_server
    ports:
      - "5000:5000"
    volumes:
      - product_data:/app/data
    depends_on:
      # --- MODIFICATION: Changed depends_on to use the service_healthy condition ---
      broker:
        condition: service_healthy
      redis:
        condition: service_started
    command: ["python", "app.py"] # Using app.py as entrypoint

  kafka_consumer:
    build: .
    container_name: kafka_consumer
    volumes:
      - product_data:/app/data
    depends_on:
      # --- MODIFICATION: Changed depends_on to use the service_healthy condition ---
      broker:
        condition: service_healthy
      redis:
        condition: service_started
    command: ["python", "consumers.py"]
    restart: on-failure

volumes:
  product_data:
